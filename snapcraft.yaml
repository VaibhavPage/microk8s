name: microk8s
version-script: |
  if [ -z "$KUBE_SNAP_BINS" ]; then
    curl -L https://dl.k8s.io/release/stable.txt
  else
    cat $KUBE_SNAP_BINS/version
  fi
version: "latest"
summary: Kubernetes in your box.
description: Microk8s deploys and configures all kubernetes services in a snap.
grade: stable
confinement: classic

apps:
  daemon-etcd:
    command: run-with-config-args etcd
    daemon: simple
    plugs:
        - network
        - network-bind
  daemon-docker:
    command: run-with-config-args dockerd
    daemon: simple
    plugs:
        - network
        - network-bind

  daemon-apiserver:
    command: run-with-config-args kube-apiserver
    daemon: simple
    plugs:
        - network
        - network-bind

  daemon-controller-manager:
    command: run-with-config-args kube-controller-manager
    daemon: simple
    plugs:
        - network
        - network-bind
  daemon-scheduler:
    command: run-with-config-args kube-scheduler
    daemon: simple
    plugs:
        - network
        - network-bind
        - home

  daemon-kubelet:
    command: run-with-config-args kubelet
    plugs:
        - network
        - network-bind
        - home
    daemon: simple

  daemon-proxy:
    command: run-with-config-args kube-proxy
    daemon: simple
    plugs:
        - network
        - network-bind
        - network-control

  kubectl:
    command: kubectl --kubeconfig=$SNAP/client.config

  enable:
    command: microk8s-enable.wrapper
  disable:
    command: microk8s-disable.wrapper

parts:
  microk8s:
    plugin: dump
    build-attributes: [no-patchelf]
    build-packages:
    - curl
    - openssl
    - file
    stage-packages:
    - conntrack
    - aufs-tools
    source: .
    override-build: |
      set -eu
      . build-scripts/prepare-env.sh

      if [ -z "$KUBE_SNAP_BINS" ]; then
        echo "Downloading binaries from upstream"
        # Also sets KUBE_SNAP_BINS
        . build-scripts/fetch-binaries.sh
      fi

      echo "Creating hooks"
      build-scripts/create-install-hook.sh
      build-scripts/create-remove-hook.sh

      echo "Setting default daemon configs"
      cp -r $KUBE_SNAP_ROOT/microk8s-resources/default-args .

      echo "Building certs"
      build-scripts/build-certs.sh

      echo "Preparing nvidia runtime"
      curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
      sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

      # Install nvidia-docker2 and reload the Docker daemon configuration
      curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -
      distribution=$(. /etc/os-release;echo $ID$VERSION_ID)
      curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.list
      sudo apt-get update
      sudo apt-get install -y "docker-ce=17.12.1~ce-0~ubuntu"
      sudo apt-get install -y "nvidia-container-runtime=2.0.0+docker17.12.1-1"
      sudo apt-get install -y "nvidia-docker2=2.0.3+docker17.12.1-1"


      echo "Preparing cni"
      mkdir -p opt/cni/bin/
      cp $KUBE_SNAP_BINS/cni/* opt/cni/bin/

      echo "Preparing etcd"
      cp $KUBE_SNAP_BINS/etcd/etcd .
      cp $KUBE_SNAP_BINS/etcd/etcdctl .

      echo "Preparing kube-apiserver"
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kube-apiserver .
      cp $KUBE_SNAP_ROOT/microk8s-resources/known_token.csv .
      cp $KUBE_SNAP_ROOT/microk8s-resources/basic_auth.csv .

      echo "Preparing kube-controller-manager"
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kube-controller-manager .

      echo "Preparing kube-scheduler"
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kube-scheduler .

      echo "Preparing kubelet"
      mkdir -p configs
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kubelet .
      cp $KUBE_SNAP_ROOT/microk8s-resources/kubelet.config ./configs/

      echo "Preparing kube-proxy"
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kube-proxy .
      cp $KUBE_SNAP_ROOT/microk8s-resources/kubeproxy.config .

      echo "Preparing kubelet"
      cp $KUBE_SNAP_BINS/$KUBE_ARCH/kubectl .

      echo "Preparing user config"
      cp $KUBE_SNAP_ROOT/microk8s-resources/client.config .

      echo "Creating commands and wrappers"
      cp $KUBE_SNAP_ROOT/microk8s-resources/wrappers/* .
      #TODO(kjackal): yaml manifests may need to be rendered to match the $SNAP_ARCH
      cp -r $KUBE_SNAP_ROOT/microk8s-resources/yaml .

      snapcraftctl build
